/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run scicomp/ebola -profile test,<docker/singularity> --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

process {
    penv = 'smp'
}

params {
    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline function'

    // Input options
    input                      = "${projectDir}/assets/samplesheet_short.csv"

    //please enter 'illumina', 'pacbio', or 'nanopore'
    read_type                  = 'illumina'

    //replace value with [true] to assemble reads with meta spades
    meta_sample                = true

    //replace value with [true] to build custom blast db
    build_blast_db = false

    //if you set build_blast_db to true then you need to specify the path to the ref fasta
    blastdb_fasta = "${projectDir}/assets/Composite_Ebola_Sequences.fa"

    //if build_blast_db is set to false, then you need to specify the blastdb dir
    blastdb_dir = '/scicomp/reference/ncbi-blast-virus-db/nt'

    //you can specify 'viruses', 'bacteria', 'archaea', 'mitochondria' here for prokka annotation mode
    sample_domain              = 'viruses'

    // set to true and input paths to short read data for hybrid assembly
    hybrid_assembly            = false
    hybrid_assembly_short_read_1 = null
    hybrid_assembly_short_read_2 = null

    //BLAST custom params
    blast_evalue = "1e-5"
    blast_qcov_hsp_perc = "70"
    blast_perc_identity = "70" 
    blast_bitscore = "50"

    //FastANI custom params
    fastaniparams              = "m:m"

    // References
    kraken_db_human            = "/scicomp/reference/kraken-human/"
    kraken_db_std              = "/scicomp/reference/kraken_std8/"
    adapters                   = "/scicomp/reference/adapters/sequencing-adapters.fasta"
    fasta                      = "${projectDir}/assets/GCA_000848505.1_EBOLA_ViralProj14703_genomic.fna"
    genomes_for_msa            = "/scicomp/reference/nextflow/cdc_hackathon/Reference_Genomes_Ebola/genome_list_sourmash.txt"
}


/////////////////////////////////////////////////////////////
// add optional argument to minimap2 and fastp based on read_type param

if (params.read_type == 'illumina') {
    params {
        minimap2_args = '-ax sr'
        fastp_args = ''
    }
} else if (params.read_type == 'pacbio') {
    params {
        minimap2_args = '-ax map-pb'
        fastp_args = '-q 8'
    }
} else if (params.read_type == 'nanopore') {
    params {
        minimap2_args = '-ax map-ont'
        fastp_args = '-q 8'
    }
}

/////////////////////////////////////////////////////////////
// set spades to process metagenomic samples based on params.meta_sample
params {
    spades_args = ''
}

if (params.meta_sample) {
    params {
        spades_args = '--meta'
    }
}

if (params.hybrid_assembly) {
    params {
        spades_args = params.spades_args + " --pe1-1 " + params.hybrid_assembly_short_read_1 + " --pe1-2 " + params.hybrid_assembly_short_read_2
    }
}

/////////////////////////////////////////////////////////////
// set prokka a specific annotation mode based on params.sample_domain
if (params.sample_domain == 'viruses') {
    params {
        prokka_args = '--kingdom Viruses'
    }
} else if (params.sample_domain == 'archaea') {
    params {
        prokka_args = '--kingdom Archaea'
    }
} else if (params.sample_domain == 'bacteria') {
    params {
        prokka_args = '--kingdom Bacteria'
    }
} else if (params.sample_domain == 'mitochondria') {
    params {
        prokka_args = '--kingdom Mitochondria'
    }
}
